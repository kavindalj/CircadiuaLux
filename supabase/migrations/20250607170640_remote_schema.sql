

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."update_full_name"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
begin
  new.full_name := new.first_name || ' ' || new.last_name;
  return new;
end;
$$;


ALTER FUNCTION "public"."update_full_name"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."devices" (
    "device_id" "text" NOT NULL,
    "room_no" "text" NOT NULL,
    "floor_no" smallint,
    "building_no" smallint
);


ALTER TABLE "public"."devices" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."diseases" (
    "disease_id" "text" NOT NULL,
    "sleep_time" "text" NOT NULL,
    "disease_name" "text"
);


ALTER TABLE "public"."diseases" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."issues" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."issues" OWNER TO "postgres";


ALTER TABLE "public"."issues" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."issues_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."lighting_predictions" (
    "id" bigint NOT NULL,
    "patient_id" bigint,
    "PhotopicLux" double precision,
    "mel_ratio" double precision,
    "CCT_estimated" bigint,
    "time" "text"
);


ALTER TABLE "public"."lighting_predictions" OWNER TO "postgres";


ALTER TABLE "public"."lighting_predictions" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."lighting_predictions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."password_reset_requests" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "email" "text",
    "nic" "text",
    "full_name" "text",
    "phone" "text"
);


ALTER TABLE "public"."password_reset_requests" OWNER TO "postgres";


ALTER TABLE "public"."password_reset_requests" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."password_reset_requests_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."patients" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "age" smallint,
    "gender" "text",
    "chronotype" "text",
    "sleep_duration" "text",
    "wake_time" "text",
    "patient_name" "text",
    "room_no" "text",
    "patient_status" "text",
    "disease_description" "text",
    "disease" "text"
);


ALTER TABLE "public"."patients" OWNER TO "postgres";


ALTER TABLE "public"."patients" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."patients_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "role" "text",
    "first_name" "text",
    "full_name" "text",
    "phone" "text",
    "email" character varying,
    "show_id" bigint NOT NULL,
    "gender" "text",
    "nic" "text",
    "last_name" "text",
    "avatar_url" "text",
    CONSTRAINT "profiles_role_check" CHECK (("role" = ANY (ARRAY['admin'::"text", 'caretaker'::"text"])))
);


ALTER TABLE "public"."profiles" OWNER TO "postgres";


ALTER TABLE "public"."profiles" ALTER COLUMN "show_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."profiles_show_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE OR REPLACE VIEW "public"."user_profiles" WITH ("security_invoker"='on') AS
 SELECT "profiles"."show_id",
    "profiles"."role",
    "profiles"."full_name",
    "users"."email",
    "profiles"."id",
    "profiles"."phone",
    "profiles"."gender",
    "profiles"."nic",
    "profiles"."first_name"
   FROM ("public"."profiles"
     JOIN "auth"."users" ON (("profiles"."id" = "users"."id")));


ALTER TABLE "public"."user_profiles" OWNER TO "postgres";


ALTER TABLE ONLY "public"."diseases"
    ADD CONSTRAINT "Diseases_pkey" PRIMARY KEY ("disease_id");



ALTER TABLE ONLY "public"."devices"
    ADD CONSTRAINT "devices_device_id_key" UNIQUE ("device_id");



ALTER TABLE ONLY "public"."devices"
    ADD CONSTRAINT "devices_pkey" PRIMARY KEY ("room_no");



ALTER TABLE ONLY "public"."devices"
    ADD CONSTRAINT "devices_room_no_key" UNIQUE ("room_no");



ALTER TABLE ONLY "public"."issues"
    ADD CONSTRAINT "issues_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."lighting_predictions"
    ADD CONSTRAINT "lighting_predictions_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."password_reset_requests"
    ADD CONSTRAINT "password_reset_requests_id_key" UNIQUE ("id");



ALTER TABLE ONLY "public"."password_reset_requests"
    ADD CONSTRAINT "password_reset_requests_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."patients"
    ADD CONSTRAINT "patients_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_show_id_key" UNIQUE ("show_id");



ALTER TABLE ONLY "public"."lighting_predictions"
    ADD CONSTRAINT "unique_patient_time" UNIQUE ("patient_id", "time");



CREATE OR REPLACE TRIGGER "send patient data" AFTER INSERT OR UPDATE ON "public"."patients" FOR EACH ROW EXECUTE FUNCTION "supabase_functions"."http_request"('https://cb41-2a09-bac5-4863-15f-00-23-47d.ngrok-free.app/predict', 'POST', '{"Content-type":"application/json"}', '{}', '5000');



CREATE OR REPLACE TRIGGER "set_full_name" BEFORE INSERT OR UPDATE ON "public"."profiles" FOR EACH ROW EXECUTE FUNCTION "public"."update_full_name"();



ALTER TABLE ONLY "public"."lighting_predictions"
    ADD CONSTRAINT "lighting_predictions_patient_id_fkey" FOREIGN KEY ("patient_id") REFERENCES "public"."patients"("id");



ALTER TABLE ONLY "public"."patients"
    ADD CONSTRAINT "patients_disease_fkey" FOREIGN KEY ("disease") REFERENCES "public"."diseases"("disease_id");



ALTER TABLE ONLY "public"."patients"
    ADD CONSTRAINT "patients_room_no_fkey" FOREIGN KEY ("room_no") REFERENCES "public"."devices"("room_no");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_auth_id_fk" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



CREATE POLICY "Allow read access to all" ON "public"."patients" FOR SELECT USING (true);



CREATE POLICY "Users can insert their profile" ON "public"."profiles" FOR INSERT WITH CHECK (("auth"."uid"() = "id"));



CREATE POLICY "Users can view their own profile" ON "public"."profiles" FOR SELECT USING (("auth"."uid"() = "id"));



ALTER TABLE "public"."issues" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."password_reset_requests" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."patients";






GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";




















































































































































































GRANT ALL ON FUNCTION "public"."update_full_name"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_full_name"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_full_name"() TO "service_role";



























GRANT ALL ON TABLE "public"."devices" TO "anon";
GRANT ALL ON TABLE "public"."devices" TO "authenticated";
GRANT ALL ON TABLE "public"."devices" TO "service_role";



GRANT ALL ON TABLE "public"."diseases" TO "anon";
GRANT ALL ON TABLE "public"."diseases" TO "authenticated";
GRANT ALL ON TABLE "public"."diseases" TO "service_role";



GRANT ALL ON TABLE "public"."issues" TO "anon";
GRANT ALL ON TABLE "public"."issues" TO "authenticated";
GRANT ALL ON TABLE "public"."issues" TO "service_role";



GRANT ALL ON SEQUENCE "public"."issues_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."issues_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."issues_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."lighting_predictions" TO "anon";
GRANT ALL ON TABLE "public"."lighting_predictions" TO "authenticated";
GRANT ALL ON TABLE "public"."lighting_predictions" TO "service_role";



GRANT ALL ON SEQUENCE "public"."lighting_predictions_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."lighting_predictions_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."lighting_predictions_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."password_reset_requests" TO "anon";
GRANT ALL ON TABLE "public"."password_reset_requests" TO "authenticated";
GRANT ALL ON TABLE "public"."password_reset_requests" TO "service_role";



GRANT ALL ON SEQUENCE "public"."password_reset_requests_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."password_reset_requests_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."password_reset_requests_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."patients" TO "anon";
GRANT ALL ON TABLE "public"."patients" TO "authenticated";
GRANT ALL ON TABLE "public"."patients" TO "service_role";



GRANT ALL ON SEQUENCE "public"."patients_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."patients_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."patients_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";



GRANT ALL ON SEQUENCE "public"."profiles_show_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."profiles_show_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."profiles_show_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."user_profiles" TO "anon";
GRANT ALL ON TABLE "public"."user_profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."user_profiles" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
